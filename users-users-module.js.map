{"version":3,"sources":["./src/app/users/components/profile/profile.component.ts","./src/app/users/components/profile/profile.component.html","./src/app/users/reducers/index.ts","./src/app/users/users-routing.module.ts","./src/app/users/components/register/register.component.ts","./src/app/users/components/register/register.component.html","./src/app/users/components/login/login.component.ts","./src/app/users/components/login/login.component.html","./src/app/users/users.component.ts","./src/app/users/users.component.html","./src/app/users/users.module.ts"],"names":[],"mappings":"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","file":"users-users-module.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {IUser} from \"../../models/IUser\";\nimport {AuthService} from \"../../../root/services/auth.service\";\nimport {IAddress} from \"../../models/IAddress\";\nimport {select, Store} from \"@ngrx/store\";\nimport {State} from \"../../../reducers\";\nimport * as userActions from '../../actions/user.actions';\nimport * as userReducer from '../../reducers/user.reducer';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.css']\n})\nexport class ProfileComponent implements OnInit {\n\n  public enableAddress:boolean = false;\n  public userInfo:IUser;\n  public address:IAddress = {\n    flat : '',\n    landmark : '',\n    mobile : '',\n    city : '',\n    country : '',\n    pin : '',\n    state : '',\n    street : ''\n  };\n  public loading:boolean;\n  constructor(private store:Store<State>,\n              private authService:AuthService) { }\n\n  ngOnInit(): void {\n    this.userInfo = this.authService.getUserInfo();\n    this.store.pipe(select(userReducer.userFeatureKey)).subscribe((state) => {\n      this.loading = state.loading;\n      this.address = state.user?.address;\n    });\n  }\n\n  // handleInput\n  public handleInput(event){\n    this.address = {\n      ...this.address,\n      [event.target.name] : event.target.value\n    }\n  }\n\n  // submitUpdateAddress\n  public submitUpdateAddress(){\n    this.store.dispatch(userActions.updateAddress({address : this.address}));\n    this.enableAddress = false;\n    this.store.pipe(select(userReducer.userFeatureKey)).subscribe((state) => {\n      this.loading = state.loading;\n      this.address = state.user.address;\n    });\n  }\n\n}\n","<section class=\"p-3 bg-brains text-dark\">\n  <div class=\"container\">\n    <div class=\"row animated flipInY\">\n      <div class=\"col\">\n        <p class=\"h3\">\n          <i class=\"fa fa-user-circle\"></i> Your Profile</p>\n      </div>\n    </div>\n  </div>\n</section>\n<!-- Loading Spinner -->\n<div *ngIf=\"loading\">\n  <img src=\"../../../../assets/img/spinner.gif\" class=\"d-block m-auto\" alt=\"\">\n</div>\n\n<section class=\"p-3 mt-3\" *ngIf=\"!loading\">\n  <div class=\"container\" *ngIf=\"userInfo\">\n    <div class=\"row\">\n      <div class=\"col-md-4 animated zoomInLeft\">\n        <img [src]=\"userInfo.avatar\" class=\"img-fluid rounded-circle img-thumbnail\" alt=\"\">\n      </div>\n      <div class=\"col-md-8 animated zoomInRight\">\n        <div class=\"card\">\n          <div class=\"card-header bg-dark text-brains\">\n            <p class=\"h4\">Your Information</p>\n          </div>\n          <div class=\"card-body bg-brains\">\n            <ul class=\"list-group\">\n              <li class=\"list-group-item\">\n                NAME : {{userInfo.name}}\n              </li>\n              <li class=\"list-group-item\">\n                Email : {{userInfo.email}}\n              </li>\n              <li class=\"list-group-item\">\n                Mobile : {{userInfo.address?.mobile}}\n              </li>\n            </ul>\n          </div>\n        </div>\n        <div class=\"card mt-3\">\n          <div class=\"card-header bg-dark text-brains\">\n            <div class=\"row\">\n              <div class=\"col\">\n                <span class=\"h4\">Billing Address</span>\n              </div>\n              <div class=\"col\">\n                <form>\n                  <div class=\"custom-control custom-switch\">\n                    <input\n                      name=\"enableAddress\"\n                      [(ngModel)]=\"enableAddress\"\n                      type=\"checkbox\" class=\"custom-control-input\" id=\"customSwitch1\">\n                    <label class=\"custom-control-label\" for=\"customSwitch1\">Enable Address</label>\n                  </div>\n                </form>\n              </div>\n            </div>\n          </div>\n          <div class=\"card-body bg-brains\">\n            <ul class=\"list-group\" *ngIf=\"!enableAddress\">\n              <li class=\"list-group-item\">\n                H.NO : {{address.flat}}\n              </li>\n              <li class=\"list-group-item\">\n                Street :{{address.street}}\n              </li>\n              <li class=\"list-group-item\">\n                Landmark : {{address.landmark}}\n              </li>\n              <li class=\"list-group-item\">\n                City : {{address.city}}\n              </li>\n              <li class=\"list-group-item\">\n                State : {{address.state}}\n              </li>\n              <li class=\"list-group-item\">\n                Country : {{address.country}}\n              </li>\n              <li class=\"list-group-item\">\n                PinCode : {{address.pin}}\n              </li>\n              <li class=\"list-group-item\">\n                Mobile : {{address.mobile}}\n              </li>\n            </ul>\n            <!-- when enabled -->\n            <div *ngIf=\"enableAddress\">\n              <form (submit)=\"submitUpdateAddress()\">\n                <div class=\"form-group\">\n                  <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text bg-dark text-brains\" id=\"basic-addon1\">Flat</span>\n                    </div>\n                    <input\n                      name=\"flat\"\n                      [value]=\"address.flat\"\n                      (input)=\"handleInput($event)\"\n                      type=\"text\" class=\"form-control\" placeholder=\"Flat\" aria-label=\"Username\" aria-describedby=\"basic-addon1\">\n                  </div>\n                </div>\n                <div class=\"form-group\">\n                  <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text bg-dark text-brains\" id=\"basic-addon2\">Street</span>\n                    </div>\n                    <input\n                      name=\"street\"\n                      [value]=\"address.street\"\n                      (input)=\"handleInput($event)\"\n                      type=\"text\" class=\"form-control\" placeholder=\"Street\" aria-label=\"Username\" aria-describedby=\"basic-addon1\">\n                  </div>\n                </div>\n                <div class=\"form-group\">\n                  <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text bg-dark text-brains\" id=\"basic-addon3\">Landmark</span>\n                    </div>\n                    <input\n                      name=\"landmark\"\n                      [value]=\"address.landmark\"\n                      (input)=\"handleInput($event)\"\n                      type=\"text\" class=\"form-control\" placeholder=\"Landmark\" aria-label=\"Username\" aria-describedby=\"basic-addon1\">\n                  </div>\n                </div>\n                <div class=\"form-group\">\n                  <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text bg-dark text-brains\" id=\"basic-addon4\">City</span>\n                    </div>\n                    <input\n                      name=\"city\"\n                      [value]=\"address.city\"\n                      (input)=\"handleInput($event)\"\n                      type=\"text\" class=\"form-control\" placeholder=\"City\" aria-label=\"Username\" aria-describedby=\"basic-addon1\">\n                  </div>\n                </div>\n                <div class=\"form-group\">\n                  <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text bg-dark text-brains\" id=\"basic-addon5\">State</span>\n                    </div>\n                    <input\n                      name=\"state\"\n                      [value]=\"address.state\"\n                      (input)=\"handleInput($event)\"\n                      type=\"text\" class=\"form-control\" placeholder=\"State\" aria-label=\"Username\" aria-describedby=\"basic-addon1\">\n                  </div>\n                </div>\n                <div class=\"form-group\">\n                  <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text bg-dark text-brains\" id=\"basic-addon6\">Contry</span>\n                    </div>\n                    <input\n                      name=\"country\"\n                      [value]=\"address.country\"\n                      (input)=\"handleInput($event)\"\n                      type=\"text\" class=\"form-control\" placeholder=\"Country\" aria-label=\"Username\" aria-describedby=\"basic-addon1\">\n                  </div>\n                </div>\n                <div class=\"form-group\">\n                  <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text bg-dark text-brains\" id=\"basic-addon8\">Pincode</span>\n                    </div>\n                    <input\n                      name=\"pin\"\n                      [value]=\"address.pin\"\n                      (input)=\"handleInput($event)\"\n                      type=\"text\" class=\"form-control\" placeholder=\"PinCode\" aria-label=\"Username\" aria-describedby=\"basic-addon1\">\n                  </div>\n                </div>\n                <div class=\"form-group\">\n                  <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                      <span class=\"input-group-text bg-dark text-brains\" id=\"basic-addon7\">Mobile</span>\n                    </div>\n                    <input\n                      name=\"mobile\"\n                      [value]=\"address.mobile\"\n                      (input)=\"handleInput($event)\"\n                      type=\"text\" class=\"form-control\" placeholder=\"Mobile\" aria-label=\"Username\" aria-describedby=\"basic-addon1\">\n                  </div>\n                </div>\n                <div>\n                  <input type=\"submit\" class=\"btn btn-dark text-brains btn-sm\" value=\"Update Address\">\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n","import {\n  ActionReducer,\n  ActionReducerMap,\n  createFeatureSelector,\n  createSelector,\n  MetaReducer\n} from '@ngrx/store';\nimport { environment } from '../../../environments/environment';\n\nexport const stateFeatureKey = 'state';\n\nexport interface State {\n\n}\n\nexport const reducers: ActionReducerMap<State> = {\n\n};\n\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { UsersComponent } from './users.component';\nimport {ProfileComponent} from \"./components/profile/profile.component\";\nimport {LoginComponent} from \"./components/login/login.component\";\nimport {RegisterComponent} from \"./components/register/register.component\";\n\nconst routes: Routes = [\n  { path: '', component: UsersComponent },\n  { path: 'profile', component: ProfileComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n\n  ];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class UsersRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {IUser} from \"../../models/IUser\";\nimport {Store} from \"@ngrx/store\";\nimport {State} from \"../../../reducers\";\nimport * as userActions from '../../actions/user.actions';\nimport * as userReducer from '../../reducers/user.reducer';\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  public user:IUser= {\n    name : '',\n    email : '',\n    password : '',\n    confirmPassword : ''\n  };\n  public isEmptyForm:boolean = false;\n  public errorMessage:string;\n\n  constructor(private store:Store<State>) { }\n\n  ngOnInit(): void {\n  }\n\n  public submitRegister(){\n    if(this.user.name !== '' && this.user.email !== '' && this.user.password !== '' && this.user.confirmPassword !== ''){\n      if(this.user.password !== this.user.confirmPassword){\n        this.errorMessage = 'Passwords are not Matched';\n        setTimeout(() => {\n          this.errorMessage = null;\n        }, 2000);\n      }\n      else{\n        this.store.dispatch(userActions.registerUser({user : this.user}));\n      }\n    }\n    else{\n      this.isEmptyForm = true;\n      setTimeout(() => {\n        this.isEmptyForm = false;\n      }, 2000);\n    }\n  }\n\n  // closeAlert\n  public closeAlert(){\n    this.isEmptyForm = false;\n  }\n}\n","<section class=\"p-3 bg-brains text-dark\">\n  <div class=\"container\">\n    <div class=\"row animated flipInY\">\n      <div class=\"col\">\n        <p class=\"h3\">\n          <i class=\"fa fa-user-cog\"></i> Register Here</p>\n      </div>\n    </div>\n  </div>\n</section>\n\n<section class=\"mt-3 p-3\">\n  <div class=\"container\">\n    <div class=\"row animated zoomInDown\">\n      <div class=\"col-md-4 m-auto\">\n        <!-- Error Message -->\n        <div *ngIf=\"errorMessage\" class=\"alert alert-danger alert-dismissible animated zoomIn\">\n          <button class=\"close\"><i  class=\"fa fa-times-circle\"></i></button>\n          <small class=\"font-weight-bold\">{{errorMessage}}</small>\n        </div>\n        <!-- Empty Form Error -->\n        <div *ngIf=\"isEmptyForm\" class=\"alert alert-danger alert-dismissible animated zoomIn\">\n          <button class=\"close\" (click)=\"closeAlert()\"><i  class=\"fa fa-times-circle\"></i></button>\n          <small class=\"font-weight-bold\">Please fill in the Fields</small>\n        </div>\n        <div class=\"card\">\n          <div class=\"card-header bg-dark text-brains\">\n            <p class=\"h4\">Register</p>\n          </div>\n          <div class=\"card-body bg-brains\">\n            <form #registrationForm=\"ngForm\" (submit)=\"submitRegister()\">\n              <div class=\"form-group\">\n                <input\n                  #username=\"ngModel\"\n                  name=\"name\"\n                  [(ngModel)]=\"user.name\"\n                  required pattern=\"[a-zA-Z0-9]+\"\n                  type=\"text\" class=\"form-control\" placeholder=\"Name\"\n                  [class.is-invalid]=\"username.touched && username.invalid\"\n                  [class.is-valid]=\"username.touched && username.valid\">\n                <div *ngIf=\"username.touched && username.invalid\">\n                  <small class=\"text-danger\" *ngIf=\"username.errors.required\">UserName is Required</small>\n                  <small class=\"text-danger\" *ngIf=\"username.errors.pattern\">No Special Characters</small>\n                </div>\n                <small *ngIf=\"username.touched && username.valid\" class=\"text-success\">Looks Good</small>\n              </div>\n              <div class=\"form-group\">\n                <input\n                  #email=\"ngModel\"\n                  name=\"email\"\n                  [(ngModel)]=\"user.email\"\n                  [class.is-invalid]=\"email.touched && email.invalid\"\n                  [class.is-valid]=\"email.touched && email.valid\"\n                  type=\"email\" class=\"form-control\" placeholder=\"Email\"\n                  required pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\">\n                <div *ngIf=\"email.touched && email.invalid\">\n                  <small class=\"text-danger\" *ngIf=\"email.errors.required\">Email is Required</small>\n                  <small class=\"text-danger\" *ngIf=\"email.errors.pattern\">Invalid Email</small>\n                </div>\n                <small *ngIf=\"email.touched && email.valid\" class=\"text-success\">Looks Good</small>\n              </div>\n              <div class=\"form-group\">\n                <input\n                  #password=\"ngModel\"\n                  name=\"password\"\n                  [(ngModel)]=\"user.password\"\n                  [class.is-invalid]=\"password.touched && password.invalid\"\n                  [class.is-valid]=\"password.touched && password.valid\"\n                  type=\"password\" class=\"form-control\" placeholder=\"Password\"\n                  required pattern=\"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$\">\n                <div *ngIf=\"password.touched && password.invalid\">\n                  <small class=\"text-danger\" *ngIf=\"password.errors.required\">Password is Required</small>\n                  <small class=\"text-danger\" *ngIf=\"password.errors.pattern\">Invalid Password</small>\n                </div>\n                <small *ngIf=\"password.touched && password.valid\" class=\"text-success\">Looks Good</small>\n              </div>\n              <div class=\"form-group\">\n                <input\n                  #confirmPassword=\"ngModel\"\n                  name=\"confirmPassword\"\n                  [(ngModel)]=\"user.confirmPassword\"\n                  [class.is-invalid]=\"confirmPassword.touched && confirmPassword.invalid\"\n                  [class.is-valid]=\"confirmPassword.touched && confirmPassword.valid\"\n                  type=\"password\" class=\"form-control\" placeholder=\"Confirm Password\"\n                  required pattern=\"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$\">\n                <div *ngIf=\"confirmPassword.touched && confirmPassword.invalid\">\n                  <small class=\"text-danger\" *ngIf=\"confirmPassword.errors.required\">ConfirmPassword is Required</small>\n                  <small class=\"text-danger\" *ngIf=\"confirmPassword.errors.pattern\">Invalid ConfirmPassword</small>\n                </div>\n                <small *ngIf=\"confirmPassword.touched && confirmPassword.valid\" class=\"text-success\">Looks Good</small>\n              </div>\n              <div>\n                <input type=\"submit\" class=\"btn btn-dark text-brains btn-sm\" value=\"Register\">\n              </div>\n            </form>\n            <small>Have an account ?\n              <a routerLink=\"/users/login\" class=\"font-weight-bold\">Login</a>\n            </small>\n          </div>\n          <div class=\"card-footer bg-dark text-center\">\n            <img src=\"../../../../assets/img/brand.PNG\" alt=\"\" width=\"150\" height=\"35\">\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n","import { Component, OnInit } from '@angular/core';\nimport {IUser} from \"../../models/IUser\";\nimport {Store} from \"@ngrx/store\";\nimport {State} from \"../../../reducers\";\nimport * as userActions from '../../actions/user.actions';\nimport * as userReducer from '../../reducers/user.reducer';\nimport {AuthService} from \"../../../root/services/auth.service\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  public user:IUser = {\n    name : '',\n    password : '',\n    confirmPassword : '',\n    email : ''\n  };\n  public isEmptyForm:boolean=false;\n  constructor(private store:Store<State>,\n              private authService:AuthService) { }\n\n  ngOnInit(): void {\n  }\n\n  // submitLogin\n  public submitLogin(){\n    if(this.user.email === '' && this.user.password === ''){\n       this.isEmptyForm = true;\n       setTimeout(() => {\n         this.isEmptyForm = false;\n       }, 2000);\n    }\n    else {\n        this.store.dispatch(userActions.loginUser({user : this.user}));\n        if(this.authService.isLoggedIn()){\n          this.store.dispatch(userActions.loadUser());\n        }\n    }\n  }\n\n  // closeAlert\n  public closeAlert(){\n    this.isEmptyForm = false;\n  }\n}\n","<section class=\"p-3 bg-brains text-dark\">\n  <div class=\"container\">\n    <div class=\"row animated flipInY\">\n      <div class=\"col\">\n        <p class=\"h3\">\n         <i class=\"fa fa-sign-in-alt\"></i> Login Here</p>\n      </div>\n    </div>\n  </div>\n</section>\n\n<section class=\"mt-3 p-3\">\n  <div class=\"container\">\n    <div class=\"row animated zoomInDown\">\n      <div class=\"col-md-4 m-auto\">\n        <!-- Empty Form Error -->\n        <div *ngIf=\"isEmptyForm\" class=\"alert alert-danger alert-dismissible animated zoomIn\">\n          <button class=\"close\" (click)=\"closeAlert()\"><i  class=\"fa fa-times-circle\"></i></button>\n          <small class=\"font-weight-bold\">Please fill in the Fields</small>\n        </div>\n        <div class=\"card\">\n          <div class=\"card-header bg-dark text-brains\">\n            <p class=\"h4\">Login</p>\n          </div>\n          <div class=\"card-body bg-brains\">\n            <form #registrationForm=\"ngForm\" (submit)=\"submitLogin()\">\n              <div class=\"form-group\">\n                <input\n                    #email=\"ngModel\"\n                    name=\"email\"\n                    [(ngModel)]=\"user.email\"\n                    [class.is-invalid]=\"email.touched && email.invalid\"\n                    [class.is-valid]=\"email.touched && email.valid\"\n                    type=\"email\" class=\"form-control\" placeholder=\"Email\"\n                    required pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\">\n                <div *ngIf=\"email.touched && email.invalid\">\n                  <small class=\"text-danger\" *ngIf=\"email.errors.required\">Email is Required</small>\n                  <small class=\"text-danger\" *ngIf=\"email.errors.pattern\">Invalid Email</small>\n                </div>\n                <small *ngIf=\"email.touched && email.valid\" class=\"text-success\">Looks Good</small>\n              </div>\n              <div class=\"form-group\">\n                <input\n                    #password=\"ngModel\"\n                    name=\"password\"\n                    [(ngModel)]=\"user.password\"\n                    [class.is-invalid]=\"password.touched && password.invalid\"\n                    [class.is-valid]=\"password.touched && password.valid\"\n                    type=\"password\" class=\"form-control\" placeholder=\"Password\"\n                    required pattern=\"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,20}$\">\n                <div *ngIf=\"password.touched && password.invalid\">\n                  <small class=\"text-danger\" *ngIf=\"password.errors.required\">Password is Required</small>\n                  <small class=\"text-danger\" *ngIf=\"password.errors.pattern\">Invalid Password</small>\n                </div>\n                <small *ngIf=\"password.touched && password.valid\" class=\"text-success\">Looks Good</small>\n              </div>\n              <div>\n                <input type=\"submit\" class=\"btn btn-dark text-brains btn-sm\" value=\"Login\">\n              </div>\n            </form>\n            <small>New To Brains Kart ?\n              <a routerLink=\"/users/register\" class=\"font-weight-bold\">Register</a>\n            </small>\n          </div>\n          <div class=\"card-footer bg-dark text-center\">\n            <img src=\"../../../../assets/img/brand.PNG\" alt=\"\" width=\"150\" height=\"35\">\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</section>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.css']\n})\nexport class UsersComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>users works!</p>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from \"@angular/forms\";\nimport { UsersRoutingModule } from './users-routing.module';\nimport { UsersComponent } from './users.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { StoreModule } from '@ngrx/store';\nimport * as fromState from './reducers';\nimport { EffectsModule } from '@ngrx/effects';\nimport { UserEffects } from './effects/user.effects';\nimport { HttpClientModule } from \"@angular/common/http\";\n\n@NgModule({\n  declarations: [UsersComponent, LoginComponent, RegisterComponent, ProfileComponent],\n  imports: [\n    CommonModule,\n    UsersRoutingModule,\n    FormsModule,\n    HttpClientModule,\n    StoreModule.forFeature(fromState.stateFeatureKey, fromState.reducers, { metaReducers: fromState.metaReducers }),\n    EffectsModule.forFeature([UserEffects])\n  ]\n})\nexport class UsersModule { }\n"],"sourceRoot":"webpack:///"}